1.1 install bootstrap :
     jadi kita delete semua isi dari app.css utk app.tsx dan index.css utk main.tsx 
     kita install bootstrap@5.2.3 nah di bagian main kita import bootstrap 
     nah kita taruh import pada bagian index atau main.tsx 
     import 'bootstrap/dist/css/bootstrap.css' 

1.2 ingat dalam sbuah jsx( html marking dalam javasicrpt ) maka gak boleh 2 tag 
    atau lebih dalam return( <tag1></tag1> <tag2></tag2> ..tagn
    )    
    maka semua harus dibungkus dgn 1 buah tag penutup yaitu fragment kita bisa menuliskanya 
    dgn <> atau dikenal dgn fragment 

1.3 kalau kita merender Jsx yaitu hmtl dalam javascript For tidak ada dlam jsx utk iut 
    kita mmbuat map nah element2nya jsx trbut yg dinamix misalkan tag list dlm bootstrap
    nah terdiri dari ul sbgai headernya dan li adalah itemm elemetnya dan nlai didalamnya 
    akan kita buat dinamic nah utk dnamic kita buat variable array yg nnti akan kita render 
    contoh  let items =["sepatu","pakaian","mobil","creditcard","tas"]
    nah yg dimaping  dgn cara penggunaan fnctional aray yaitu map dimana mengubah element array menjadi
    output yg lain nah ingat didalam tag jsx kita gak bisa render sbuah script javascript maka harus kita 
    buat kruung kurawal dulu itu script javascript kita  
    contoh  dibawga ini kan ada ul sbgai wrappernya si li  nah li inilah yg dinamik merupakan element2nya
    dan ul adalah tag wrapernya tetap sgai tag htmlnya ,krn dalam jsx yg boleh di render tag html 
    nah si element ini kita kasih wraping {} tanda kurung kurwal karena javascript! nah utk li dia harus unix 
    maka utk render array maka ditagnya kita beri key sbb:
         <ul className="ListItem">
         
           {items.map((item)=>{

            return {
                <li key={item}>{item}</li>
            }

           })}
           kita taruh item sbgai key karena masing 2 element array uniq gak ada yg sama namanya 

         </ul> 
    dan ingat sbuah looping utk render harus ada key jika kita mau render sbuah list array dan sejenisnya 
    karena masing2 element harus unix ktika dirender maka harus ada key penunjuk        
     
     hasil:

function ListGroup (){
    const items = ["sepatu","tas","kemeja",'kaos',"celdam","dasi"]
    return ( 
        <ul className="list-group">
            {items.map((item)=>{
                return(
                    <li className="list-group-item" key={item}>{item}</li>
                )
            })}
        
       
      </ul>
    )
  
}

export default ListGroup
nah speti itu 

1.4 gimana jika ada sbuah conditional misalkan kalau items array kita adalah array kosong kita akan tampilkan 
    <p> no item found</p> nah dalam jsx ingat hanya ada 2 yg boleh muncul 
    1. tag html 
    2.component react speti diatas ListGroup itu adalah component react yg kita panggil di app.tsx 
    nah ada 2 opsi kita akan gunakan  ertinari operator javascript dan penggunaan && 
    ertinary operator sbb:
    kita tetap harus bungkus dgn {} smua jscrip dalam jsx ysitu didalam return( --ini ddlam sini tempat jsx--)
    nah sbb: ]
    1.ertinari : {statment-logic?renderjikabenar: render jika salah }
      utk diatas maka {items.length === 0?<p>item not found</p>: null}
      nah ada yg lebih elegant yaitu dgn opearator dan  && kita bisa uji dgn console
      jadi stiap dia true maka hasilnya adalah yg sblah kanan di render (cotoh pake console)
      contoh : true && indra
              hasil: indra 
              true && "meong"
              hasil:"meong" 
              kalau false &&"sllau salah"
              hasil:false 
       nah utk itu kita tinggal buat statment berikut 
       {items.length && <p> item not found </p>} 
       nah maka back ke script kita menjadi:
       function ListGroup (){
    let items = ["sepatu","tas","kemeja",'kaos',"celdam","dasi"]
    //kita ganti let agar bisa di update ukt percobaan iternary operator dan && 
     items =[]
    return ( 
        <>
            {items.length == 0 && <p>Item not Found !!</p>}
        <ul className="list-group">
            {items.map((item)=>{
                return(
                    <li className="list-group-item" key={item}>{item}</li>
                )
            })}
        
       
      </ul>
        </>
        
    )
  
}

1.5 Handling Event 

     nah utk onclick arrow fucntionya berisi parameter event browser boleh kita taruh nama e saja 
     nah di react event browser ini bertype class object namanya :class synteticBase Event  di console anda lihat list2  type element Object 
     nya ,nah bisa kita gunakan console.log utk check :
      
       <ul className="ListGroup">
          {items.map((item)=>{
            return <li className"ListGroup-Item" 
            key=Item 
            //param evebt ini sebarabg nama tapi mengingat klik adalah event maka namanya saya sesuiakan 
            onclick={(event)=>console.log(event)}
            >{item}</li>
          })}
       </ul>

      pada console isi class syntheticBaseEvent:
     class syntheticBaseEvent{ }
     nah jika anda clik akan banyak lis2t element property object dari class ini ,
     salah satunya adalah sbb smua disini propwety event browser dari objecct antara lain ( yg penting2 saja)
     SyntheticBaseEvent {_reactName: 'onClick', _targetInst: null, type: 'click', nativeEvent: PointerEvent, target: li.list-group-item, â€¦}

clientX: 86 //posis curson dimana waktu mouseclikc 
clientY: 63 //posis curson dimana waktu mouseclikc 


target: li.list-group-item //adalah object target yg diklik 

type:"click" <---tyoe dari eventbrroser 
jadi intinya semmang udah lengkap event browser ini ,nah ytk tangani clikc 
tadi kita gak buat function ddalam kalang onClick={()=>{
    //tidak buat disini karena komplesitas kita hanya merefer nama fucntion di luar diaras return()
}}
sehingga biasaya  kita buat function handlerSubit (isal namanya srtpi ini )
const handlerSubmit =()=> {

} 
return (

     <li onClick={handlerClick}></li>
)

nah tadi didalam jsx ketika kita  sorot sblum scritnya progaram kita ubah kita sorot param  event 
didalam function eventBrowser onClick maka akan ada typenya yaitu :

onclick={(event)=>console.log(event)} 
nah waktu event disrot maka otomatis ada tyenya yaitu: 
(parameter) event: React.MouseEvent<HTMLLIElement, MouseEvent>
nah disitu paramter event bertype React.MouseEvent ,dan identitynya adalah HTMLLIElement dimana 
dia adalah bagian dari objecct list dan event yg terjadiadalah bertype MouseEvent!

nah kalau diluar jsx akan error harus dideclare itu param event yg amsuk d onclic!
kenapa karena di berada dalam jsx maka otomatsi si react langsung kash tau type secara inferere artinya gak erlu
ditulis type dari paramnya karna otomatis dikenali oleh react karena dia berada dlam wilyaha jsx!
nah diluar jsx maka kita harus isi itu type param eventnya karena yaitu kita menyebutnya melakukan type anotation
yaitu kita akan mendeclarasikan 
jadi diatas :
Kita import {MouseEvent} from React ;

const handlerClick =(event:MouseEvent)=>{console.log(event)}
seandainya tidak diberi type declare anotation sprti diatas maka dia param event diatas 
akan bertype any dan kita tak tahu property dan method dari object event ini jadi utk itulah mesti diberi 
type annotation jika kita mmbuat function diatas return() diluar kalang jsx 
utk selanjutnya jika buat functional eventBrowser semacam onClick diatas maka harus posisinya 
diatas kalang jsx yaitu diatas return()

2.6 Managing State 
    Nah pada managing state listGroup ini kita akan buat trsorot atau active 
    nah pada propertinya jika kita beri active maka dia akan trsorot coba kita kasih actve maka akan trsorot smua 
    nah tapinya kita mau hanya ketika diclikc saja maka List-Group-Item tsb itu yg active 
    nah diaras return() kita buat const selectedItem = 0 ; kalau selectedItem =1 dan >0 maka itu artinya 
    index yg kita tekan mangacu pada list-Group-Item index yg saat itu kita tekan 
    nah masih ingat sblumnya kita bias buat irtenary operator supaya ktika diclikc dia active atau tidak 
    arti selectedItem = 0 1 2 atau 3 adalah no index yg terselect 
     
    let SelectedIndex = 3; //kalau dia -1 artinya tidak dipilih karna tidak ada index array yg -1
  //sua mulai dari nol

  return (
    <>
      {items.length == 0 && <p>Item not Found !!</p>}
      <ul className="list-group">
        {items.map((item, index) => {
          return (
            <li
              className={
                SelectedIndex === index
                  ? "list-group-item active"
                  : "list-group-item"
              }
              key={item}
              // onClick={()=>console.log(item,index)}
              //onClick={(event) => console.log(event)}
              onClick={() => (SelectedIndex = index)} //ini yg akan sebabkan nilai selected index berubah
            >
              {item}
            </li>
          );
        })}
      </ul>
    </>
  );
}
Nah WAKTU KITA KLIK GAK BRUBAH lantas gimana ?ya karena state atau logic yg kita buat ada didalam function component 
sehingga react tidak bisa tahu terjadi perubahan tsb utk HAL ITU jika kita mau mengetahui condition state logic 
maka kita harus DEClARE dgn hoook react sudah ada toolnya library namanya useState  
nah useState ini teridir dari sbuah array yg isinya [variableAwal,Fn_Pengubah_Variable_awal]
jadi kalau ditulis sprti ini simbolnya const [var,Fn_var] 
nah jadi utk array no 2 tsb adalah function yg ubah set variable awal ubah2 nilainya  nah perubahanya disimpah kembal di 
var yaitu variable awal tadi! 
ditulis spti ini mis sprti diatas const [selectItem,setSelectedItem] = useState(0)
jangan lupa tanda kruung di useState adalah nilai awal variable selectItem yaitu 0 .

 nah 1 buah functional component spti sebut saja ListGroup.tsx ini dia ini ada sbuah state yg mana 
 utk dirinya nah misalkan kita panggil atau re-use ListGroup fnctional component ini maka 
 dia akan INDEPENDENT SATU SAMA LAIN contoh:
 const App =()=>{
    <ListGroup/>
    <ListGroup/>
 }

nah liat dibrowser smua akan independent satu sama lain gak ada yg statenya (yg active ) diklik beda2 
monggo silahkan dcoba ! 

     
   


2.7 Passing Data via Props roupt 

     apa sih props itu ?props adalah input yg masuk kedalam sbuah function Component sprti yg kita buat tadi
     yaitu component/ListGroup.tsx 
     nah utk masuk data bisa berupa banyak input kita masukan dlm bentuk object nah kita akan mnggunaan shape of objecttadi 
     bentuk type datanya apa yg akan masuk sbgai input pada component yg dituju 
     nah biasanta yg masuk ini dari parent kecompoonet ke child component  nah mis dari App.tsx ---> data variable 
     parameternya du passing sbgai input pada anak/child component sbut saja :ListGroup 
     nah caranya adalah tadi variable yg di ListGroup kita cobat raruh di APp.tsx dan kita pasing ke component ListGroup
     jadi di anak tadi variable yg masuk harus sama dgn parameter di App.tsx  yg akan dipasing ke anak component 
     dan jangan lupa di anak component harus buat inteface shape of object dari typedata input yg masuk 
     contoh kita mau  buat masukan input utk items bertype string array dan heading bertype strinng 
     maka di anak component disini ListGroup kita buat interface ,kita buat namanya Props saja
     biasanya nama interface sesuai dgn nama file function Component mis :ListGroupProps {} 
     kita buat jamaknya namai saja Props 
     interface Props{
        items:string[];
        heading:string;
     }


     nah di inputan masuk  function parameter paramnya akan bertype dari interface tsb !
     yaitu : {props:Props},props huruf kecil sblah kri adalah nama variable parameter booleh sbgarang nama 
     tapi jamak pake react slalu pake nama huruf kecil dgn nama props! :)))

     function ListGroup({props:Props}) { } 
     nah ini kita bisa destruct dgn tulis masing2 dari element dari Interface Props yaiut element variable langusng 
     jadi setelah didestruc menjadi:

     function ListGroup({items,heading}:Props) {} ok kita erjakan sekanrag di vscode !



     }

     INGAT SELALU ! INGAT SELLAU jika kita udah buat shape of object dari interface pada suatu Functuon component
     MAKA harus ada parent intinya yg akan melewatkan props/variable parameter dari parent ke si Function component ini 
     yg uda kita declate shape of  function componentnya!
     contoh diatas ini si child function component kita dleclare shape of object interfacenya 
      file ListGroup.tsx 
      //declare shape of bejct interface 
      interface {
        items:string[];
        heading:string;
      }
     const fucntion ListGroup(){

     }

     Nah maka di App.ts (parent dari si functon compoent dlm hal in parentnya si ListGroup function)
     maka sebelah kiri propertinya yg element interface diatas merupakan nama VARIABLE PARAM yg akan masuk 
     input ke si functon compoent anak (ListGroup) 
     nah jadi nulisnya  
     App.tsx 
     const App =()=> {
        <ListGroup items={var1} heading={var2} />
        jadi var1 dan var2 adalah variable yg dideclare di App.ts dan ada nlainya 
        nah items dan jeading adalah nama params yg sama yg mana akan masuk ke si anak functoon (ListGroup) 
        dimana param yg masuk ini harus dbuatan shape of object interfacenya atau harus dideclare type dataya 
        secara anotation  sprti ini : items:string[] (contohnya anotation sprti ini !)
     } 




2.8 Passing Function Via Props 
   jadi gini jika suatu fucntion Componet dalam hal ini ada event dimana event2 function dibuat di anak 
   compoent maka ini sama saja Fucnton Compoennt tsb TIDAK RE=USEABLE! maka dari itu harus ada consumer dalam hal ini 
   parent yg passing props/input ke si anak Function Component,
   NAH OLEH KARENANYA KITA AKAN BUAT FUNCTION HANDLER ADA PADA PARENT component sebut saja di App.tsx 
   nah utk itu kan buttuh variable passing parameter agar si function handler tadi masuk sbgai input di anak componentsebut saja ListGroup.tsx 
   nah pakemnya utk itu maka di ListGroup buat proptety nama_param variable dimana property param variable ini 
   BERTYPE SI FUNCTION DARI PARENT YG AKAN DIPASSING JADI DITULIS HEADERNYA si Funtion yg ditulis diparent ini  

    misalkan nih diparent buat function contoh di App.tsx
    const handleSelectItem =(item:string)=> {
      console.log(item)
    }
     nah di bagin return () kita buat param vaiable utk masuk ingat nama harus sama dgn property yg dideclare di 
     anak component (ListGroup.tsx) 
     pada return (
       <ListGroup onSelectedItem={handleSelectItem} />  //nah nama function parent dipassing 

     )

      nah selanjutnya kan itu si paramtadi onSelectedItem masuk sbgai props nah kita perlu declare 
      di inteface anak component nah ingat paramnya ditulis sblah kiri harus sama dgn yg punya parent 
      nah dan ingat utk sebelah kanan stlah titk dua : itu adalah type dari functionnya yaiut jelas headernya 
      si nama parent function itu senditi dimana diatas adlaah :(item:string)=>void 
      nah karena tak ada return ya ditulis void!
       jadi penulisanya di anak component sbb:
       interface Props {
        onSelectedItem:(item:string)=>void
       }
       nah pada return() kan itu adalah event nah pada saat onClick supaya consumer tahu dia dlcik yaitu tadi 
       kita masukan utk event pada saat onClick kita reference kita panggil lewat parametenya atau naamprops yg masuk tadi 
       yaitu si onSelectedItem dgn dipanggil onSelectedItem otomatus function (item:string)=>{} bekerja! 
       dan notify konsumernya !
       berkut penulisanya:
       onClick ={onSelectedItem(item) }  //jadi item param kita masukan di pasing inout functonya 
       //agar nilaunya yg masuk ke functuon (item:string)=>{console.log(item) } dapat ditampilkan dinamis 
       //nah lengkapnya sprti ini kalau sudah ada 1 baris jika tambah 2 baris di Onclick maka kita beri tanda kurung kurawal {}
       sbb:
        onClick={() => {setSelectedIndex(index)
                       onSelectedItem(item)}
              } 
       
       lengkapnya bisa diliat langsung d vscodenya! 

2.9 State vs Props 

    Beda State dan Props apa?

    -Props :
     -input masuk kedalam function component bisa variable atau function itu sndiri 
       (datang dari parent keanak)
       -sama siiiar sperti function args 
       -immutable gak bisa diubah kit agak boleh langsung ubah 
         misalkan props heading = "bla bla 
         didalam anak component 
      - perubahan hanya dilakukan di parent dan perubahan ini cause a re-render tampian!
       note:imutable adalah tak dapat dichange dianak compoennt secara langsung 


     -State :
       -merupakan management data yg dlakukan oleh anak component ' 
         dan bakunya harus declare melalui hook useState agar diketahui oleh react 
       -ini similiar speti lolca variable 
       -bersifat mutable yaitu dapat berubah 
       - cause re-render ulang /perubahan tampilan akibat state berubah!   

   






2.10 Passing Children 
      nah ini dia yg perlu kita bahas agar tidak bingung maksud children itu apa 
      nah kebanyakan yg mau dipassing adalah sbuah tag content kedalam function component anak sbut saja Alert.tsx
      lha saya mau pasing content sprti ini  <p>Hello Indra</p> atau yg lebih complex lagi 
      maka di Parent kita harus import namanya ReactNode karena yg akan dipassing adalah "children" maka 
      type children ini adalah ReactNode 
      nah utk hal tsb pada parent tag functioal component yg kanan tutup harus kita buka biar gak uggly kata mosh !
      jadi harus ada tag buka dan tag tutub dan paramter content ada ditengahnya nah jadinya speti ini 
      
      contoh pada parent App.tsx 
      const children = "<p>Wrong type please repeat!</p>

      <ListGroup>{children}</ListGroup>

      nah pada functional component anak yaitu Alert.tsx 

      import ReactNode from 'react';
      interface Props {
        children:ReactNode
      }

      const Alert =({children}:Props)=> {
         return ( 
             <div alert alert-primary>{children}</div>

         )
        <div></div>
      }
         

       cara penulsan 2nya yg di anak sama nah yg di App.tsx beda sprti ini :
       yaitu langsung diatara 2 tag nnti si anak udah paham karena berada di 
       tag sianak yaitu <Alert></Alert> jadi langusung tulis content html disana sudah 
       dianggap sbgai children yg bertype ReactNode!

       import Alert from "./components/Alert";

const App = () => {

  
  return (
    <>
       //isalkan kita tulis begini :
      <Alert> Hello <p>Indra apa kabar??</p> </Alert>
    </>
  );

  //asal diapit oleh anak tag <Alert></Alert> maka content yg masuk pasing langsung 
  l//functinal component anak dalam hal ini Alert otomatis dipass truught! tanpa kasih sama denga = 
  //makanya krn kita declare sbgai childern dgn type ReactNode sprti inilah gaya penuisanya!
};

export default App;






2.11 Inspectiong Component with React Dev Tools 
2.12 Exercise Building Button Component 
2.13 Ezercise  Building Alert Component 
2.14 SUmmary 



