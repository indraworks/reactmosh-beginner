1.1 install bootstrap :
     jadi kita delete semua isi dari app.css utk app.tsx dan index.css utk main.tsx 
     kita install bootstrap@5.2.3 nah di bagian main kita import bootstrap 
     nah kita taruh import pada bagian index atau main.tsx 
     import 'bootstrap/dist/css/bootstrap.css' 

1.2 ingat dalam sbuah jsx( html marking dalam javasicrpt ) maka gak boleh 2 tag 
    atau lebih dalam return( <tag1></tag1> <tag2></tag2> ..tagn
    )    
    maka semua harus dibungkus dgn 1 buah tag penutup yaitu fragment kita bisa menuliskanya 
    dgn <> atau dikenal dgn fragment 

1.3 kalau kita merender Jsx yaitu hmtl dalam javascript For tidak ada dlam jsx utk iut 
    kita mmbuat map nah element2nya jsx trbut yg dinamix misalkan tag list dlm bootstrap
    nah terdiri dari ul sbgai headernya dan li adalah itemm elemetnya dan nlai didalamnya 
    akan kita buat dinamic nah utk dnamic kita buat variable array yg nnti akan kita render 
    contoh  let items =["sepatu","pakaian","mobil","creditcard","tas"]
    nah yg dimaping  dgn cara penggunaan fnctional aray yaitu map dimana mengubah element array menjadi
    output yg lain nah ingat didalam tag jsx kita gak bisa render sbuah script javascript maka harus kita 
    buat kruung kurawal dulu itu script javascript kita  
    contoh  dibawga ini kan ada ul sbgai wrappernya si li  nah li inilah yg dinamik merupakan element2nya
    dan ul adalah tag wrapernya tetap sgai tag htmlnya ,krn dalam jsx yg boleh di render tag html 
    nah si element ini kita kasih wraping {} tanda kurung kurwal karena javascript! nah utk li dia harus unix 
    maka utk render array maka ditagnya kita beri key sbb:
         <ul className="ListItem">
         
           {items.map((item)=>{

            return {
                <li key={item}>{item}</li>
            }

           })}
           kita taruh item sbgai key karena masing 2 element array uniq gak ada yg sama namanya 

         </ul> 
    dan ingat sbuah looping utk render harus ada key jika kita mau render sbuah list array dan sejenisnya 
    karena masing2 element harus unix ktika dirender maka harus ada key penunjuk        
     
     hasil:

function ListGroup (){
    const items = ["sepatu","tas","kemeja",'kaos',"celdam","dasi"]
    return ( 
        <ul className="list-group">
            {items.map((item)=>{
                return(
                    <li className="list-group-item" key={item}>{item}</li>
                )
            })}
        
       
      </ul>
    )
  
}

export default ListGroup
nah speti itu 

1.4 gimana jika ada sbuah conditional misalkan kalau items array kita adalah array kosong kita akan tampilkan 
    <p> no item found</p> nah dalam jsx ingat hanya ada 2 yg boleh muncul 
    1. tag html 
    2.component react speti diatas ListGroup itu adalah component react yg kita panggil di app.tsx 
    nah ada 2 opsi kita akan gunakan  ertinari operator javascript dan penggunaan && 
    ertinary operator sbb:
    kita tetap harus bungkus dgn {} smua jscrip dalam jsx ysitu didalam return( --ini ddlam sini tempat jsx--)
    nah sbb: ]
    1.ertinari : {statment-logic?renderjikabenar: render jika salah }
      utk diatas maka {items.length === 0?<p>item not found</p>: null}
      nah ada yg lebih elegant yaitu dgn opearator dan  && kita bisa uji dgn console
      jadi stiap dia true maka hasilnya adalah yg sblah kanan di render (cotoh pake console)
      contoh : true && indra
              hasil: indra 
              true && "meong"
              hasil:"meong" 
              kalau false &&"sllau salah"
              hasil:false 
       nah utk itu kita tinggal buat statment berikut 
       {items.length && <p> item not found </p>} 
       nah maka back ke script kita menjadi:
       function ListGroup (){
    let items = ["sepatu","tas","kemeja",'kaos',"celdam","dasi"]
    //kita ganti let agar bisa di update ukt percobaan iternary operator dan && 
     items =[]
    return ( 
        <>
            {items.length == 0 && <p>Item not Found !!</p>}
        <ul className="list-group">
            {items.map((item)=>{
                return(
                    <li className="list-group-item" key={item}>{item}</li>
                )
            })}
        
       
      </ul>
        </>
        
    )
  
}

1.5 Handling Event 

     nah utk onclick arrow fucntionya berisi parameter event browser boleh kita taruh nama e saja 
     nah di react event browser ini bertype class object namanya :class synteticBase Event  di console anda lihat list2  type element Object 
     nya ,nah bisa kita gunakan console.log utk check :
      
       <ul className="ListGroup">
          {items.map((item)=>{
            return <li className"ListGroup-Item" 
            key=Item 
            //param evebt ini sebarabg nama tapi mengingat klik adalah event maka namanya saya sesuiakan 
            onclick={(event)=>console.log(event)}
            >{item}</li>
          })}
       </ul>

      pada console isi class syntheticBaseEvent:
     class syntheticBaseEvent{ }
     nah jika anda clik akan banyak lis2t element property object dari class ini ,
     salah satunya adalah sbb smua disini propwety event browser dari objecct antara lain ( yg penting2 saja)
     SyntheticBaseEvent {_reactName: 'onClick', _targetInst: null, type: 'click', nativeEvent: PointerEvent, target: li.list-group-item, â€¦}

clientX: 86 //posis curson dimana waktu mouseclikc 
clientY: 63 //posis curson dimana waktu mouseclikc 


target: li.list-group-item //adalah object target yg diklik 

type:"click" <---tyoe dari eventbrroser 
jadi intinya semmang udah lengkap event browser ini ,nah ytk tangani clikc 
tadi kita gak buat function ddalam kalang onClick={()=>{
    //tidak buat disini karena komplesitas kita hanya merefer nama fucntion di luar diaras return()
}}
sehingga biasaya  kita buat function handlerSubit (isal namanya srtpi ini )
const handlerSubmit =()=> {

} 
return (

     <li onClick={handlerClick}></li>
)

nah tadi didalam jsx ketika kita  sorot sblum scritnya progaram kita ubah kita sorot param  event 
didalam function eventBrowser onClick maka akan ada typenya yaitu :

onclick={(event)=>console.log(event)} 
nah waktu event disrot maka otomatis ada tyenya yaitu: 
(parameter) event: React.MouseEvent<HTMLLIElement, MouseEvent>
nah disitu paramter event bertype React.MouseEvent ,dan identitynya adalah HTMLLIElement dimana 
dia adalah bagian dari objecct list dan event yg terjadiadalah bertype MouseEvent!

nah kalau diluar jsx akan error harus dideclare itu param event yg amsuk d onclic!
kenapa karena di berada dalam jsx maka otomatsi si react langsung kash tau type secara inferere artinya gak erlu
ditulis type dari paramnya karna otomatis dikenali oleh react karena dia berada dlam wilyaha jsx!
nah diluar jsx maka kita harus isi itu type param eventnya karena yaitu kita menyebutnya melakukan type anotation
yaitu kita akan mendeclarasikan 
jadi diatas :
Kita import {MouseEvent} from React ;

const handlerClick =(event:MouseEvent)=>{console.log(event)}
seandainya tidak diberi type declare anotation sprti diatas maka dia param event diatas 
akan bertype any dan kita tak tahu property dan method dari object event ini jadi utk itulah mesti diberi 
type annotation jika kita mmbuat function diatas return() diluar kalang jsx 
utk selanjutnya jika buat functional eventBrowser semacam onClick diatas maka harus posisinya 
diatas kalang jsx yaitu diatas return()

